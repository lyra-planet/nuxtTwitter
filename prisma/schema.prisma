// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  name String?
  username String @unique
  password String
  profileImage String?
  
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt 

  refreshToken RefreshToken[]
  tweet Tweet[]
  mediaFiles MediaFile[]
}

model RefreshToken {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    token String @unique

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt 

    userId String @db.ObjectId
    user User @relation(fields: [userId],references: [id])
}

model Tweet{
   id String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt 

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  
  replyToId String? @db.ObjectId
  replyTo Tweet? @relation("replies",fields: [replyToId],references: [id],onDelete:NoAction,onUpdate:NoAction)
  replies Tweet[] @relation("replies")

  mediaFiles MediaFile[]

}

model MediaFile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  providerPublicId String
  url String 

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt   

  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])


  tweet Tweet? @relation(fields: [tweetId],references: [id])
  tweetId String? @db.ObjectId
}